package io.taucoin.android.wallet.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import io.taucoin.android.wallet.db.entity.MiningInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MINING_INFO".
*/
public class MiningInfoDao extends AbstractDao<MiningInfo, Long> {

    public static final String TABLENAME = "MINING_INFO";

    /**
     * Properties of entity MiningInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property PubKey = new Property(1, String.class, "pubKey", false, "PUB_KEY");
        public final static Property BlockNo = new Property(2, String.class, "blockNo", false, "BLOCK_NO");
        public final static Property BlockHash = new Property(3, String.class, "blockHash", false, "BLOCK_HASH");
        public final static Property Reward = new Property(4, String.class, "reward", false, "REWARD");
        public final static Property Valid = new Property(5, int.class, "valid", false, "VALID");
        public final static Property Total = new Property(6, int.class, "total", false, "TOTAL");
    }


    public MiningInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MiningInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MINING_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"PUB_KEY\" TEXT," + // 1: pubKey
                "\"BLOCK_NO\" TEXT," + // 2: blockNo
                "\"BLOCK_HASH\" TEXT," + // 3: blockHash
                "\"REWARD\" TEXT," + // 4: reward
                "\"VALID\" INTEGER NOT NULL ," + // 5: valid
                "\"TOTAL\" INTEGER NOT NULL );"); // 6: total
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MINING_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MiningInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String pubKey = entity.getPubKey();
        if (pubKey != null) {
            stmt.bindString(2, pubKey);
        }
 
        String blockNo = entity.getBlockNo();
        if (blockNo != null) {
            stmt.bindString(3, blockNo);
        }
 
        String blockHash = entity.getBlockHash();
        if (blockHash != null) {
            stmt.bindString(4, blockHash);
        }
 
        String reward = entity.getReward();
        if (reward != null) {
            stmt.bindString(5, reward);
        }
        stmt.bindLong(6, entity.getValid());
        stmt.bindLong(7, entity.getTotal());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MiningInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String pubKey = entity.getPubKey();
        if (pubKey != null) {
            stmt.bindString(2, pubKey);
        }
 
        String blockNo = entity.getBlockNo();
        if (blockNo != null) {
            stmt.bindString(3, blockNo);
        }
 
        String blockHash = entity.getBlockHash();
        if (blockHash != null) {
            stmt.bindString(4, blockHash);
        }
 
        String reward = entity.getReward();
        if (reward != null) {
            stmt.bindString(5, reward);
        }
        stmt.bindLong(6, entity.getValid());
        stmt.bindLong(7, entity.getTotal());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MiningInfo readEntity(Cursor cursor, int offset) {
        MiningInfo entity = new MiningInfo( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pubKey
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // blockNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // blockHash
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // reward
            cursor.getInt(offset + 5), // valid
            cursor.getInt(offset + 6) // total
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MiningInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPubKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBlockNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBlockHash(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReward(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setValid(cursor.getInt(offset + 5));
        entity.setTotal(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MiningInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MiningInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MiningInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
