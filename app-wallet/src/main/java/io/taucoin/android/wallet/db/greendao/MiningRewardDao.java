package io.taucoin.android.wallet.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import io.taucoin.android.wallet.db.entity.MiningReward;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MINING_REWARD".
*/
public class MiningRewardDao extends AbstractDao<MiningReward, Long> {

    public static final String TABLENAME = "MINING_REWARD";

    /**
     * Properties of entity MiningReward.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PubKey = new Property(1, String.class, "pubKey", false, "PUB_KEY");
        public final static Property TxId = new Property(2, String.class, "txId", false, "TX_ID");
        public final static Property TxHash = new Property(3, String.class, "txHash", false, "TX_HASH");
        public final static Property Fee = new Property(4, String.class, "fee", false, "FEE");
        public final static Property Status = new Property(5, int.class, "status", false, "STATUS");
        public final static Property Valid = new Property(6, int.class, "valid", false, "VALID");
    }


    public MiningRewardDao(DaoConfig config) {
        super(config);
    }
    
    public MiningRewardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MINING_REWARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PUB_KEY\" TEXT," + // 1: pubKey
                "\"TX_ID\" TEXT," + // 2: txId
                "\"TX_HASH\" TEXT," + // 3: txHash
                "\"FEE\" TEXT," + // 4: fee
                "\"STATUS\" INTEGER NOT NULL ," + // 5: status
                "\"VALID\" INTEGER NOT NULL );"); // 6: valid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MINING_REWARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MiningReward entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pubKey = entity.getPubKey();
        if (pubKey != null) {
            stmt.bindString(2, pubKey);
        }
 
        String txId = entity.getTxId();
        if (txId != null) {
            stmt.bindString(3, txId);
        }
 
        String txHash = entity.getTxHash();
        if (txHash != null) {
            stmt.bindString(4, txHash);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(5, fee);
        }
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getValid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MiningReward entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pubKey = entity.getPubKey();
        if (pubKey != null) {
            stmt.bindString(2, pubKey);
        }
 
        String txId = entity.getTxId();
        if (txId != null) {
            stmt.bindString(3, txId);
        }
 
        String txHash = entity.getTxHash();
        if (txHash != null) {
            stmt.bindString(4, txHash);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(5, fee);
        }
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getValid());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MiningReward readEntity(Cursor cursor, int offset) {
        MiningReward entity = new MiningReward( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pubKey
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // txId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // txHash
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fee
            cursor.getInt(offset + 5), // status
            cursor.getInt(offset + 6) // valid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MiningReward entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPubKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTxId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTxHash(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFee(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.getInt(offset + 5));
        entity.setValid(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MiningReward entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MiningReward entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MiningReward entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
