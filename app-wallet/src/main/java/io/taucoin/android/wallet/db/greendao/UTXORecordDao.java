package io.taucoin.android.wallet.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import io.taucoin.android.wallet.db.entity.ScriptPubkey;
import io.taucoin.android.wallet.db.entity.UTXORecord.BigIntegerConverter;
import io.taucoin.android.wallet.db.entity.UTXORecord.ScriptPubkeyConverter;
import java.math.BigInteger;

import io.taucoin.android.wallet.db.entity.UTXORecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UTXORECORD".
*/
public class UTXORecordDao extends AbstractDao<UTXORecord, Long> {

    public static final String TABLENAME = "UTXORECORD";

    /**
     * Properties of entity UTXORecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TxId = new Property(1, String.class, "txId", false, "TX_ID");
        public final static Property Spent = new Property(2, boolean.class, "spent", false, "SPENT");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property Vout = new Property(4, long.class, "vout", false, "VOUT");
        public final static Property Confirmations = new Property(5, long.class, "confirmations", false, "CONFIRMATIONS");
        public final static Property Version = new Property(6, long.class, "version", false, "VERSION");
        public final static Property Coinbase = new Property(7, boolean.class, "coinbase", false, "COINBASE");
        public final static Property Bestblockhash = new Property(8, String.class, "bestblockhash", false, "BESTBLOCKHASH");
        public final static Property Bestblockheight = new Property(9, long.class, "bestblockheight", false, "BESTBLOCKHEIGHT");
        public final static Property Bestblocktime = new Property(10, long.class, "bestblocktime", false, "BESTBLOCKTIME");
        public final static Property Blockhash = new Property(11, String.class, "blockhash", false, "BLOCKHASH");
        public final static Property Blockheight = new Property(12, long.class, "blockheight", false, "BLOCKHEIGHT");
        public final static Property Blocktime = new Property(13, long.class, "blocktime", false, "BLOCKTIME");
        public final static Property Value = new Property(14, String.class, "value", false, "VALUE");
        public final static Property ScriptPubKey = new Property(15, String.class, "scriptPubKey", false, "SCRIPT_PUB_KEY");
    }

    private final BigIntegerConverter valueConverter = new BigIntegerConverter();
    private final ScriptPubkeyConverter scriptPubKeyConverter = new ScriptPubkeyConverter();

    public UTXORecordDao(DaoConfig config) {
        super(config);
    }
    
    public UTXORecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UTXORECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TX_ID\" TEXT," + // 1: txId
                "\"SPENT\" INTEGER NOT NULL ," + // 2: spent
                "\"ADDRESS\" TEXT," + // 3: address
                "\"VOUT\" INTEGER NOT NULL ," + // 4: vout
                "\"CONFIRMATIONS\" INTEGER NOT NULL ," + // 5: confirmations
                "\"VERSION\" INTEGER NOT NULL ," + // 6: version
                "\"COINBASE\" INTEGER NOT NULL ," + // 7: coinbase
                "\"BESTBLOCKHASH\" TEXT," + // 8: bestblockhash
                "\"BESTBLOCKHEIGHT\" INTEGER NOT NULL ," + // 9: bestblockheight
                "\"BESTBLOCKTIME\" INTEGER NOT NULL ," + // 10: bestblocktime
                "\"BLOCKHASH\" TEXT," + // 11: blockhash
                "\"BLOCKHEIGHT\" INTEGER NOT NULL ," + // 12: blockheight
                "\"BLOCKTIME\" INTEGER NOT NULL ," + // 13: blocktime
                "\"VALUE\" TEXT," + // 14: value
                "\"SCRIPT_PUB_KEY\" TEXT);"); // 15: scriptPubKey
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UTXORECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UTXORecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String txId = entity.getTxId();
        if (txId != null) {
            stmt.bindString(2, txId);
        }
        stmt.bindLong(3, entity.getSpent() ? 1L: 0L);
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
        stmt.bindLong(5, entity.getVout());
        stmt.bindLong(6, entity.getConfirmations());
        stmt.bindLong(7, entity.getVersion());
        stmt.bindLong(8, entity.getCoinbase() ? 1L: 0L);
 
        String bestblockhash = entity.getBestblockhash();
        if (bestblockhash != null) {
            stmt.bindString(9, bestblockhash);
        }
        stmt.bindLong(10, entity.getBestblockheight());
        stmt.bindLong(11, entity.getBestblocktime());
 
        String blockhash = entity.getBlockhash();
        if (blockhash != null) {
            stmt.bindString(12, blockhash);
        }
        stmt.bindLong(13, entity.getBlockheight());
        stmt.bindLong(14, entity.getBlocktime());
 
        BigInteger value = entity.getValue();
        if (value != null) {
            stmt.bindString(15, valueConverter.convertToDatabaseValue(value));
        }
 
        ScriptPubkey scriptPubKey = entity.getScriptPubKey();
        if (scriptPubKey != null) {
            stmt.bindString(16, scriptPubKeyConverter.convertToDatabaseValue(scriptPubKey));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UTXORecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String txId = entity.getTxId();
        if (txId != null) {
            stmt.bindString(2, txId);
        }
        stmt.bindLong(3, entity.getSpent() ? 1L: 0L);
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
        stmt.bindLong(5, entity.getVout());
        stmt.bindLong(6, entity.getConfirmations());
        stmt.bindLong(7, entity.getVersion());
        stmt.bindLong(8, entity.getCoinbase() ? 1L: 0L);
 
        String bestblockhash = entity.getBestblockhash();
        if (bestblockhash != null) {
            stmt.bindString(9, bestblockhash);
        }
        stmt.bindLong(10, entity.getBestblockheight());
        stmt.bindLong(11, entity.getBestblocktime());
 
        String blockhash = entity.getBlockhash();
        if (blockhash != null) {
            stmt.bindString(12, blockhash);
        }
        stmt.bindLong(13, entity.getBlockheight());
        stmt.bindLong(14, entity.getBlocktime());
 
        BigInteger value = entity.getValue();
        if (value != null) {
            stmt.bindString(15, valueConverter.convertToDatabaseValue(value));
        }
 
        ScriptPubkey scriptPubKey = entity.getScriptPubKey();
        if (scriptPubKey != null) {
            stmt.bindString(16, scriptPubKeyConverter.convertToDatabaseValue(scriptPubKey));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UTXORecord readEntity(Cursor cursor, int offset) {
        UTXORecord entity = new UTXORecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // txId
            cursor.getShort(offset + 2) != 0, // spent
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // address
            cursor.getLong(offset + 4), // vout
            cursor.getLong(offset + 5), // confirmations
            cursor.getLong(offset + 6), // version
            cursor.getShort(offset + 7) != 0, // coinbase
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // bestblockhash
            cursor.getLong(offset + 9), // bestblockheight
            cursor.getLong(offset + 10), // bestblocktime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // blockhash
            cursor.getLong(offset + 12), // blockheight
            cursor.getLong(offset + 13), // blocktime
            cursor.isNull(offset + 14) ? null : valueConverter.convertToEntityProperty(cursor.getString(offset + 14)), // value
            cursor.isNull(offset + 15) ? null : scriptPubKeyConverter.convertToEntityProperty(cursor.getString(offset + 15)) // scriptPubKey
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UTXORecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTxId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSpent(cursor.getShort(offset + 2) != 0);
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVout(cursor.getLong(offset + 4));
        entity.setConfirmations(cursor.getLong(offset + 5));
        entity.setVersion(cursor.getLong(offset + 6));
        entity.setCoinbase(cursor.getShort(offset + 7) != 0);
        entity.setBestblockhash(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBestblockheight(cursor.getLong(offset + 9));
        entity.setBestblocktime(cursor.getLong(offset + 10));
        entity.setBlockhash(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBlockheight(cursor.getLong(offset + 12));
        entity.setBlocktime(cursor.getLong(offset + 13));
        entity.setValue(cursor.isNull(offset + 14) ? null : valueConverter.convertToEntityProperty(cursor.getString(offset + 14)));
        entity.setScriptPubKey(cursor.isNull(offset + 15) ? null : scriptPubKeyConverter.convertToEntityProperty(cursor.getString(offset + 15)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UTXORecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UTXORecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UTXORecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
